@page
@using Library.Entities

@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

@* Use this as an example for own version*@
@* <script src="https://apps.elfsight.com/p/platform.js" defer></script> *@
@* <div class="elfsight-app-72adadb6-a566-4985-9bb3-ca7f6030c425"></div> *@

<div>
    @foreach (var item in Model.repo.Rooms.Get())
    {
        <article>
            <header style="display: flex; flex-direction: row; justify-content: space-between;">
                <strong>@item.Name</strong>
                @* <a href="#" onclick="OnClickDebug(event, '@item.Id')" type="button" role="button" class="outline secondary" >🪲</a> *@
            </header>
            <div style="display: flex; flex-direction: row; justify-content: space-around;">
                <p><img class="icon" src="~/imgs/temperature.png"/> @Model.GetLatestDatapointOfType(item, DataPointType.Temperature) °C</p>
                <p><img class="icon" src="~/imgs/humidity.png"/>    @Model.GetLatestDatapointOfType(item, DataPointType.Humidity, decimals: 0) %</p>
                <p><img class="icon" src="~/imgs/battery.png"/>     @Model.GetLatestDatapointOfType(item, DataPointType.Battery) %</p>
            </div>
            <div style="padding: 32px 128px 32px 128px;">
                @await Html.PartialAsync("LinearGauge", Model.GetLinearGaugeModel(item, DataPointType.Co2))

            </div>

            <canvas class="background-chart" id="@item.Id" data="@Model.GetRoomDataJson(item)"></canvas>
        </article>
    }
</div>

<script>
    function OnClickDebug(event, itemId) {
        event.preventDefault()      //used to prevent jump from <a> tag

        if (event.srcElement.innerText != itemId + " 🪲")
            event.srcElement.innerText = itemId + " 🪲"
        else
            event.srcElement.innerText = "🪲"
    }

    function initBackgroundCharts() {
        let elems = document.getElementsByClassName("background-chart");

        let options = {
            scales: {
                x: {
                    type: 'time',
                    time: {
                        parser: "yyyy-MM-dd HH:mm:ss",
                        unit: 'hour',
                        displayFormats: {
                            hour: 'HH:mm',
                            day: 'dd'
                        }
                    }
                } 
            }
        }


        for (let i = 0; i < elems.length; i++) {
            let dataString = elems[i].getAttribute("data");
            let roomData = JSON.parse(dataString);

            let keys = Object.keys(roomData);
            let dataset = keys.map(key => {
                return {
                    label: key,
                    data: roomData[key]
                };
            })
            
            plotLineChartDatasets(elems[i], dataset, options)
        }
    }

    initBackgroundCharts()
</script>